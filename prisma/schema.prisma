generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Veterinario {
  id               Int          @id @default(autoincrement())
  nome             String
  cpf              String       @unique
  crmv             String       @unique
  data_nascimento  DateTime
  endereco         String
  telefone         String
  email            String       @unique
  senha            String
  data_cadastro    DateTime     @default(now())
  data_atualizacao DateTime     @updatedAt
  data_exclusao    DateTime?
  consultas        Consulta[]
  prontuarios      Prontuario[]
  Roles            Roles?
}

model Cliente {
  id               Int          @id @default(autoincrement())
  nome             String
  email            String       @unique
  senha            String
  cpf              String       @unique
  data_nascimento  DateTime
  endereco         String
  telefone         String       @unique
  data_cadastro    DateTime     @default(now())
  data_atualizacao DateTime     @updatedAt
  data_exclusao    DateTime?
  animais          Animais[]
  prontuarios      Prontuario[]
  Roles            Roles?
}

model Animais {
  id               Int          @id @default(autoincrement())
  nome             String
  especie          String
  raca             String
  idade            Int
  peso             Float
  porte            String
  sexo             String
  data_nascimento  DateTime
  tutorId          Int
  data_cadastro    DateTime     @default(now())
  data_atualizacao DateTime     @updatedAt
  data_exclusao    DateTime?
  tutor            Cliente      @relation(fields: [tutorId], references: [id])
  consultas        Consulta[]
  prontuarios      Prontuario[]
}

model Prontuario {
  id               Int         @id @default(autoincrement())
  doencas          String
  vacinas          String
  animalId         Int
  tutorId          Int
  veterinarioId    Int
  data_cadastro    DateTime    @default(now())
  data_atualizacao DateTime    @updatedAt
  data_exclusao    DateTime?
  Consulta         Consulta[]
  animal           Animais     @relation(fields: [animalId], references: [id])
  tutor            Cliente     @relation(fields: [tutorId], references: [id])
  veterinario      Veterinario @relation(fields: [veterinarioId], references: [id])
  Servicos         Servicos[]
  Vacina           Vacina[]
}

model Consulta {
  id               Int         @id @default(autoincrement())
  data_consulta    DateTime
  peso             Float
  temperatura      Float
  pressao          String
  diagnostico      String
  veterinarioId    Int
  prontuarioId     Int
  animalId         Int
  data_cadastro    DateTime    @default(now())
  data_atualizacao DateTime    @updatedAt
  data_exclusao    DateTime?
  animal           Animais     @relation(fields: [animalId], references: [id])
  prontuario       Prontuario  @relation(fields: [prontuarioId], references: [id])
  veterinario      Veterinario @relation(fields: [veterinarioId], references: [id])
}

model Vacina {
  id               Int        @id @default(autoincrement())
  data_vacina      DateTime
  vacina           String
  observacao       String
  prontuarioId     Int
  data_cadastro    DateTime   @default(now())
  data_atualizacao DateTime   @updatedAt
  data_exclusao    DateTime?
  prontuario       Prontuario @relation(fields: [prontuarioId], references: [id])
}

model Servicos {
  id               Int        @id @default(autoincrement())
  data_servico     DateTime
  servico          String
  descricao        String
  prontuarioId     Int
  data_cadastro    DateTime   @default(now())
  data_atualizacao DateTime   @updatedAt
  data_exclusao    DateTime?
  prontuario       Prontuario @relation(fields: [prontuarioId], references: [id])
}

model Roles {
  id               Int            @id @default(autoincrement())
  role             Role
  data_cadastro    DateTime       @default(now())
  data_atualizacao DateTime       @updatedAt
  idCliente        Int?           @unique
  idVeterinario    Int?           @unique
  idAdministrador  Int?           @unique
  Administrador    Administrador? @relation(fields: [idAdministrador], references: [id])
  Cliente          Cliente?       @relation(fields: [idCliente], references: [id])
  Veterinario      Veterinario?   @relation(fields: [idVeterinario], references: [id])
}

model Administrador {
  id               Int      @id @default(autoincrement())
  nome             String
  email            String   @unique
  senha            String
  cpf              String   @unique
  data_nascimento  DateTime
  endereco         String
  telefone         String   @unique
  data_cadastro    DateTime @default(now())
  data_atualizacao DateTime
  Roles            Roles?
}

enum Role {
  CLIENTE
  VETERINARIO
  ADMINISTRADOR
}
